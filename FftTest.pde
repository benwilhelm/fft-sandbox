/**
  * This sketch demonstrates how to use an FFT to analyze
  * the audio being generated by an AudioPlayer.
  * <p>
  * FFT stands for Fast Fourier Transform, which is a 
  * method of analyzing audio that allows you to visualize 
  * the frequency content of a signal. You've seen 
  * visualizations like this before in music players 
  * and car stereos.
  * <p>
  * For more information about Minim and additional features, 
  * visit http://code.compartmental.net/minim/
  */

import processing.serial.*;
import ddf.minim.analysis.*;
import ddf.minim.*;
import cc.arduino.*;

Minim       minim;
//AudioInput  audio;
AudioPlayer audio;
FFT         fft;
Arduino     arduino;

final int RED   =  9;
final int GREEN = 10;
final int BLUE  = 11;
final int[] PINS = {RED, BLUE, GREEN};

final int BAND_MIN = 1;
final int BAND_MAX = 128;
final int BAND_DIFF = BAND_MAX - BAND_MIN;
int p=0; // log_2 of band_diff

int bandwidth = 34;
int multiplier = 128;



void setup()
{
  size(512, 256, P3D);
  
  minim = new Minim(this);
  arduino = new Arduino(this, Arduino.list()[1], 57600);
  //lineIn = minim.getLineIn();
  audio = minim.loadFile("08-Strobes.mp3");
  audio.play();
  
  // create an FFT object that has a time-domain buffer 
  // the same size as jingle's sample buffer
  // note that this needs to be a power of two 
  // and that it means the size of the spectrum will be half as large.
  fft = new FFT( audio.bufferSize(), audio.sampleRate() );

  float x=0;
  for (int i=0; x<BAND_DIFF; i++) {
    x = pow(2, i);
    p=i;
  } 
}

boolean once = true;
void draw()
{
  background(0);
  stroke(255);
  // perform a forward FFT on the samples in jingle's mix buffer,
  // which contains the mix of both the left and right channels of the file
  fft.forward( audio.mix );
  
  int next_band=0;
  for(int i = BAND_MIN; i < BAND_MAX; i++)
  {
    int this_band = (int) (i / ( Math.log(BAND_MAX - i) / Math.log(1.8) ));
    float intensity = fft.getBand(this_band) * 8;;
    if (this_band >= next_band) {
      next_band = (int) (i+1 / ( Math.log(BAND_MAX - i+1) / Math.log(1.8) ));
      
      for (int band=this_band; band<next_band; band++) {
        float next_intensity = fft.getBand(band) * 8;
        intensity = max(intensity, next_intensity); 
      }
    }
    intensity = constrain(intensity, 0, 255);
    line( i*3, height - 10, i*3, height - intensity+10 );
  }
  
  once = false;
}



